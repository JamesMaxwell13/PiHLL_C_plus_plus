#include "users.h"

int main() {
    std::fstream userbase("../users.txt");
    UserBase user(userbase);
    std::fstream prodbase("../products.txt");
    ProdBase products(prodbase);
    user.logIn();
    user[user.acc]->INTERFACE(products, user);
    userbase.close();
    prodbase.close();
    return 0;
}

//В каждом варианте использовать наследование от еще одного/нескольких классов,
//которые предложены в условии или нет. Не запрещается использовать дополнительные
//классы, которые не указаны в условии. В каждом создаваемом классе должно быть поле с
//ID экземпляра. Предусмотреть автоматическое и корректное заполнение полей класса
//данными. Реализация и объявление методов классов в разных файлах. Перегрузка
//операторов не обязательна, но желательна по усмотрению. Для хранения данных
//использовать только один список/массив.
//
//Создать классы для работы сайта. Классы для реализации: Пользователь, модератор,
//редактор, администратор. Также создать список с информацией сайта, например, пусть
//хранится информация о продаваемых товарах/услугах. У каждого пользователя независимо
//от роли по началу должна быть возможность войти на сайт для последующей работы.

//Создать функции для кодирования и декодирования строки используя “Rail Fence Cipher”.
//“WEAREDISCOVEREDFLEEATONCE” --> “WECRLTEERDSOEEFEAOCAIVDEN”

//1) Создать классы для работы сайта.
//Использовать виртуальные функции для работы с информацией об услуге/товаре.
//Например, можно добавить информацию, видимую для модераторов, редакторов,
//администраторов, которую не будет видеть пользователь.